name: Windows Intel
on:
  workflow_dispatch:
  push:
    branches:
      - master
      - ci/*
  pull_request:
    branches:
      - master
env:
  VCPKG_COMMIT: 2ad004460f5db4d3b66f62f5799ff66c265c4b5d
  MELONDS_GIT_BRANCH: ${{ github.ref }}
  MELONDS_GIT_HASH: ${{ github.sha }}
  MELONDS_BUILD_PROVIDER: GitHub Actions
  MELONDS_VERSION_SUFFIX: " RC"
  VCPKG_MAX_CONCURRENCY: 8
  CMAKE_BUILD_PARALLEL_LEVEL: 8
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Check out sources
      uses: actions/checkout@v3
      
    - name: Install Intel oneAPI
      shell: powershell
      timeout-minutes: 15
      run: |
        # WindowsのクライアントPCではIntelのwebクライアントインストーラーを使用
        # Web installerのURLをダウンロード
        $webClientUrl = "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/992057e9-c9ee-48c4-b6e0-affd0fc327c3/w_dpcpp-cpp-compiler_p_2024.0.2.28.exe"
        # WebクライアントPCを作成
        $webClient = New-Object System.Net.WebClient
        $installer = "$env:TEMP\w_dpcpp-cpp-compiler.exe"
        # ダウンロード実行
        try {
          $webClient.DownloadFile($webClientUrl, $installer)
          # コンパイラのサイレントインストール実行
          Start-Process -FilePath $installer -ArgumentList "--silent --eula=accept" -Wait -NoNewWindow
        } catch {
          Write-Host "Installer download failed. Using alternative method with Chocolatey."
          # Chocolateyインストール
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          # Intel oneAPIコンポーネントをインストール
          choco install intel-oneapi-compiler-dpcpp-cpp -y
        }
        
    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          ${{ github.workspace }}/vcpkg_installed
        key: ${{ runner.os }}-vcpkg-intel-${{ env.VCPKG_COMMIT }}-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-intel-${{ env.VCPKG_COMMIT }}-
        
    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
        
    - name: Cache CMake build directory
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/build
        key: ${{ runner.os }}-cmake-intel-build-${{ hashFiles('CMakeLists.txt', 'src/**', 'include/**') }}
        restore-keys: |
          ${{ runner.os }}-cmake-intel-build-
          
    - name: Setup Intel oneAPI environment
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64
        set >> %GITHUB_ENV%
        
    - name: Configure with Intel compiler
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64
        cmake -B build -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx -DCMAKE_BUILD_TYPE=Release -DMELONDS_EMBED_BUILD_INFO=ON
      env:
        NINJA_STATUS: "[%f/%t %o/s %es] "
        
    - name: Build with Intel compiler
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64
        cmake --build build --config Release --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}
      env:
        NINJA_STATUS: "[%f/%t %o/s %es] "
        
    - uses: actions/upload-artifact@v4
      with:
        name: melonDS-windows-intel-x86_64
        path: .\build\melonDS.exe