name: Windows

on:
  workflow_dispatch:
  push:
    branches: [ master, ci/* ]
  pull_request:
    branches: [ master ]

env:
  MELONDS_GIT_BRANCH: ${{ github.ref }}
  MELONDS_GIT_HASH: ${{ github.sha }}
  MELONDS_BUILD_PROVIDER: GitHub Actions
  MELONDS_VERSION_SUFFIX: " RC"
  VCPKG_MAX_CONCURRENCY: 8
  CMAKE_BUILD_PARALLEL_LEVEL: 8

  # すでに入れているはずの MinGW 固定
  VCPKG_DEFAULT_TRIPLET: x64-mingw-static
  VCPKG_TARGET_TRIPLET:  x64-mingw-static

  # ★ これを追加（ホスト側も MinGW に固定）
  VCPKG_DEFAULT_HOST_TRIPLET: x64-mingw-static
  VCPKG_HOST_TRIPLET:        x64-mingw-static

  VCPKG_FEATURE_FLAGS: manifests,binarycaching
  VCPKG_FORCE_SYSTEM_BINARIES: 1

jobs:
  build:
    runs-on: windows-2025
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Check out sources
        uses: actions/checkout@v4

      - name: Cache MSYS2 packages
        uses: actions/cache@v3
        with:
          path: |
            C:/msys64/var/cache/pacman/pkg
            C:/msys64/etc/pacman.d/gnupg
            D:/a/_temp/msys64/var/cache/pacman/pkg
          key: ${{ runner.os }}-msys2-pacman-${{ hashFiles('**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-msys2-pacman-

      - name: Set up MSYS2 (ucrt64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: false
          path-type: inherit
          pacboy: >-
            gcc:p
            cmake:p
            ninja:p
            make:p
            jq:p

      # ▼ overlay ディレクトリを（空でも）必ず作成
      - name: Ensure vcpkg overlay directories exist
        run: |
          mkdir -p ./cmake/overlay-ports
          mkdir -p ./cmake/overlay-triplets
          [ -f ./cmake/overlay-ports/.keep ] || echo keep > ./cmake/overlay-ports/.keep
          [ -f ./cmake/overlay-triplets/.keep ] || echo keep > ./cmake/overlay-triplets/.keep

      # ▼ vcpkg.json から builtin-baseline を取得（再現性のため）
      - name: Read vcpkg builtin-baseline
        id: baseline
        run: |
          if [ -f vcpkg.json ]; then
            BL=$(jq -r '.["builtin-baseline"] // empty' vcpkg.json)
            if [ -n "$BL" ]; then
              echo "baseline=$BL" >> $GITHUB_OUTPUT
            fi
          fi

      # ▼ vcpkg セットアップ（manifest）
      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: '**/vcpkg.json'
          vcpkgGitCommitId: ${{ steps.baseline.outputs.baseline }}

      # ▼ ここが重要：旧トリプレット汚染の徹底除去（初回のみでも可）
      - name: Purge contaminated caches
        run: |
          rm -rf ./build || true
          rm -rf ./vcpkg/buildtrees || true
          rm -rf ./vcpkg/packages || true
          rm -rf ./vcpkg_installed || true
          rm -rf ./vcpkg_binary_cache || true


      # ▼ vcpkg バイナリキャッシュ（キーに -mingw- を入れて x64-windows 汚染を回避）
      - name: Cache vcpkg binary cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vcpkg_binary_cache
          key: ${{ runner.os }}-mingw-vcpkg-bin-${{ hashFiles('vcpkg.json', 'CMakeLists.txt', 'cmake/**', 'cmake/overlay-triplets/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-mingw-vcpkg-bin-

      # ▼ CMake ビルドディレクトリのキャッシュ（任意）
      - name: Cache CMake build directory
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-mingw-cmake-build-${{ hashFiles('CMakeLists.txt', 'src/**', 'include/**', 'cmake/**') }}
          restore-keys: |
            ${{ runner.os }}-mingw-cmake-build-${{ hashFiles('CMakeLists.txt') }}
            ${{ runner.os }}-mingw-cmake-build-

      # ▼ 早期健全性チェック
      - name: Toolchain sanity check
        run: |
          which cmake
          which ninja
          which x86_64-w64-mingw32-gcc
          which x86_64-w64-mingw32-g++
          cmake --version
          ninja --version
          x86_64-w64-mingw32-gcc --version | head -n1

      # ▼ ここが肝：Ninja＋MinGW＋vcpkgツールチェーン＋トリプレットを「CMake引数で」明示上書き
      - name: Configure (Ninja + MinGW + vcpkg toolchain + triplets)
        env:
          NINJA_STATUS: "[%f/%t %o/s %es] "
          VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg_binary_cache,readwrite"
          CC:  x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
        run: |
          cmake -S . -B build/release-mingw-x86_64 -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX} \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_DEFAULT_TRIPLET=${VCPKG_DEFAULT_TRIPLET} \
            -DVCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET} \
            -DVCPKG_DEFAULT_HOST_TRIPLET=${VCPKG_DEFAULT_HOST_TRIPLET} \
            -DVCPKG_HOST_TRIPLET=${VCPKG_HOST_TRIPLET} \
            -DMELONDS_EMBED_BUILD_INFO=ON


      # ▼ 選択トリプレットの可視化（デバッグ用）
      - name: Show selected VCPKG_* from CMake cache
        run: |
          grep -E 'VCPKG_.*TRIPLET' build/release-mingw-x86_64/CMakeCache.txt || true
          cat build/release-mingw-x86_64/vcpkg-manifest-install.log | sed -n '1,120p' || true

      - name: Show selected triplets & manifest log
        run: |
          echo "=== Triplets in CMakeCache ==="
          grep -E 'VCPKG_.*TRIPLET' build/release-mingw-x86_64/CMakeCache.txt || true
          echo "=== vcpkg manifest install log (head) ==="
          sed -n '1,160p' build/release-mingw-x86_64/vcpkg-manifest-install.log || true
      
      - name: Build
        env:
          NINJA_STATUS: "[%f/%t %o/s %es] "
          VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg_binary_cache,readwrite"
        run: |
          cmake --build build/release-mingw-x86_64 --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: melonDS-windows-x86_64
          path: build/release-mingw-x86_64/melonDS.exe
