name: Windows

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - ci/*

env:
  MELONDS_GIT_BRANCH: ${{ github.ref }}
  MELONDS_GIT_HASH: ${{ github.sha }}
  MELONDS_BUILD_PROVIDER: GitHub Actions
  # vcpkg バイナリキャッシュ（リポ直下のフォルダを使う）
  VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_binary_cache,readwrite

jobs:
  build:
    runs-on: windows-2025
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Check out sources
        uses: actions/checkout@v3

      # MSYS2 のパッケージキャッシュ
      - name: Cache MSYS2 packages
        uses: actions/cache@v3
        with:
          path: |
            C:/msys64/var/cache/pacman/pkg
            C:/msys64/etc/pacman.d/gnupg
            ${{ github.workspace }}/vcpkg/downloads/tools/msys2
          key: ${{ runner.os }}-msys2-pacman-${{ hashFiles('**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-msys2-pacman-

      - name: Purge temp msys64 (cache safety)
        shell: pwsh
        run: |
          $p = Join-Path $env:RUNNER_TEMP 'msys64'
          if (Test-Path $p) { Remove-Item -Recurse -Force $p }

      - name: Set up MSYS2 (ucrt64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          path-type: inherit
          pacboy: gcc:p cmake:p ninja:p make:p jq:p

      # vcpkg.json が overlay を要求しているため、空でも必ず作る
      - name: Ensure vcpkg overlay directories exist
        run: |
          mkdir -p ./cmake/overlay-ports
          mkdir -p ./cmake/overlay-triplets
          [ -f ./cmake/overlay-ports/.keep ] || echo keep > ./cmake/overlay-ports/.keep
          [ -f ./cmake/overlay-triplets/.keep ] || echo keep > ./cmake/overlay-triplets/.keep

      # vcpkg バイナリキャッシュ用の実体フォルダ
      - name: Ensure vcpkg binary cache directory exists
        run: |
          mkdir -p "${{ github.workspace }}/vcpkg_binary_cache"
          ls -la "${{ github.workspace }}/vcpkg_binary_cache" || true

      # vcpkg ディレクトリ群のキャッシュ
      - name: Cache vcpkg directories
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/vcpkg_installed
            ${{ github.workspace }}/vcpkg/buildtrees
            ${{ github.workspace }}/vcpkg/downloads
            ${{ github.workspace }}/vcpkg/packages
            ${{ github.workspace }}/vcpkg_binary_cache
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json', 'cmake/overlay-triplets/**', 'cmake/overlay-ports/**', 'triplets/**') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Set up vcpkg (manifest)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: vcpkg.json

      # （任意）最初の数行だけでもログを出すと原因追跡が楽
      - name: Show vcpkg manifest log (head)
        run: |
          if [ -f build/release-mingw-x86_64/vcpkg-manifest-install.log ]; then
            sed -n '1,160p' build/release-mingw-x86_64/vcpkg-manifest-install.log || true
          fi

      # CMake ビルドディレクトリのキャッシュ
      - name: Cache CMake build directory
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-cmake-build-${{ hashFiles('CMakeLists.txt', 'cmake/**', 'CMakePresets.json') }}
          restore-keys: |
            ${{ runner.os }}-cmake-build-

      - name: Configure (preset)
        run: |
          cmake --preset=release-mingw-x86_64 \
            -DUSE_VCPKG=ON \
            -DMELONDS_EMBED_BUILD_INFO=ON

      - name: Build
        run: cmake --build --preset=release-mingw-x86_64 --parallel

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: melonDS-windows-x86_64
          path: build/release-mingw-x86_64/melonDS.exe
